---
import { Icon } from 'astro-icon/components';
import Logo from '~/components/Logo.astro';
import ToggleTheme from '~/components/common/ToggleTheme.astro';
// import ToggleMenu from '~/components/common/ToggleMenu.astro';
// import Button from '~/components/ui/Button.astro';
import { t } from '../../i18n';
// import logo from '~/assets/images/apsx_logo.png';

// import { getHomePermalink } from '~/utils/permalinks';
// import { trimSlash } from '~/utils/permalinks';
import type { CallToAction } from '~/types';
import SwitchLang from '../SwitchLang';
import UserDropDown from './UserDropDown';
import CartDropdown from './CartDropdown';
import HeaderSearchBar from './HeaderSearchBar';
import Menu from './Menu.astro';


interface Link {
  text?: string;
  href?: string;
  ariaLabel?: string;
  icon?: string;
}

interface MenuLink extends Link {
  links?: Array<MenuLink>;
}

export interface Props {
  id?: string;
  links?: Array<MenuLink>;
  actions?: Array<CallToAction>;
  isSticky?: boolean;
  isDark?: boolean;
  isFullWidth?: boolean;
  showToggleTheme?: boolean;
  showRssFeed?: boolean;
  position?: string;
  locale?: any;
}

const {
  id = 'header',
  links = [],
  // actions = [],
  isSticky = false,
  isDark = false,
  isFullWidth = false,
  showToggleTheme = false,
  // showRssFeed = false,
  // position = 'center',
  locale = 'en',
} = Astro.props;

// const currentPath = `/${trimSlash(new URL(Astro.url).pathname)}`;
// let isMenuOpen = false;
let isSidebarOpen = false;

// const toggleMenu = () => {
//   isMenuOpen = !isMenuOpen;
// };

// const toggleSidebar = () => {
//   isSidebarOpen = !isSidebarOpen;
// };
---
<div
  id="backdrop"
  class:list={[
    isSidebarOpen ? 'fixed inset-0 bg-black bg-opacity-50 z-40' : 'hidden',
  ]}
  aria-hidden="true"
></div>

<div
  id="sidebar"
  class:list={[
    isSidebarOpen ? 'translate-x-0' : '-translate-x-full',
    'fixed z-50 top-0 left-0 bg-white text-dark w-56 min-h-screen overflow-y-auto transition-transform transform ease-in-out duration-300',
  ]}
  data-sidebar
>
  <div class="p-4">
    <h1 class="text-2xl font-semibold">
      <Logo />
    </h1>

    

    <ul class="mt-4 space-y-2">
      {links.map(({ text, href, links }) => (
        <li>
          {links?.length ? (
            <details class="group">
              <summary
                class="cursor-pointer block hover:text-indigo-400 flex justify-between items-center"
              >
                {t(locale, text || '')}
                <Icon
                  name="tabler:chevron-down"
                  class="w-4 h-4 transition-transform group-open:rotate-180"
                />
              </summary>
              <ul class="pl-4 space-y-2 mt-2">
                {links.map(({ text: text2, href: href2 }) => (
                  <li>
                    <a
                      href={href2}
                      class="block text-gray-700 hover:text-indigo-400"
                    >
                      {t(locale, text2 || '')}
                    </a>
                  </li>
                ))}
              </ul>
            </details>
          ) : (
            <a
              href={`/${locale}/${href}`}
              class="block text-gray-700 hover:text-indigo-400"
            >
              {t(locale, text || '')}
            </a>
          )}
        </li>
      ))}
    </ul>

    <!-- Add UserDropDown to Sidebar -->
    <div class="mt-6 flex flex-col items-start gap-4">
      <UserDropDown locale={locale} client:load />
    </div>
  </div>
</div>

<header
  class:list={[
    'top-0 z-20 mx-auto w-full border-b border-gray-50/0 dark:border-gray-800 rounded-sm transition-opacity ease-in-out',
    isSticky ? 'sticky' : 'relative',
    isDark ? 'dark' : '',
  ]}
  {...isSticky && { 'data-aw-sticky-header': true }}
  {...id && { id }}
>
  <div class="absolute inset-0"></div>

  <div
    class:list={[
      'relative py-3 px-3 md:px-6 w-full mx-auto text-default flex items-center justify-between', // Adjust this line to ensure proper spacing
      !isFullWidth && 'max-w-full',
    ]}
  >
    <!-- Logo Section -->
    <a class="flex items-center" href={`/${locale}`}>
      <Logo />
    </a>

    <nav
      class:list={[
        'hidden lg:flex lg:items-center lg:justify-center lg:gap-6 flex-1',
      ]}
      aria-label="Main navigation"
    >
      <ul class="flex flex-row text-sm font-medium tracking-tight gap-4"> 
        
        {links.map(({ text, href }) => (
          <li class="lg:mr-4 flex items-center">
            <a
              href={`/${locale}/${href}`}
              class:list={[
                'hover:text-[#53b6ac] text-gray-500 dark:text-white dark:hover:text-blue-300 rounded-md p-2',
              ]}
            >
              {t(locale, text || '')}
            </a>
          </li>
        ))}
<li class="lg:mr-4">
  <HeaderSearchBar locale={locale} client:load />
</li>

        <li class="lg:mr-4">
          <div class="hidden lg:flex items-center ">
            
            <UserDropDown locale={locale} client:load />
            {showToggleTheme && <ToggleTheme iconClass="w-5 h-5" />}
            <CartDropdown locale={locale} client:load />
            <SwitchLang locale={locale} client:load />
          </div>
        </li>
      </ul>
    </nav>

    <div class="ml-auto flex items-center gap-2 lg:hidden">
      <SwitchLang locale={locale} client:load />
      {showToggleTheme && <ToggleTheme iconClass="w-5 h-5" />}

      <button
        class="block lg:hidden text-gray-500 hover:text-gray-600"
        data-toggle-sidebar
        aria-label="Toggle Sidebar"
      >
        <svg
          class="w-6 h-6"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            stroke-width="2"
            d="M4 6h16M4 12h16M4 18h16"
          ></path>
        </svg>
      </button>
    </div>
  </div>
  <Menu/>
</header>


<script>
  document.addEventListener("click", (e) => {
    const sidebar = document.querySelector("#sidebar");
    const backdrop = document.querySelector("#backdrop");
    const toggleButton = e.target.closest("[data-toggle-sidebar]");

    if (toggleButton) {
      sidebar?.classList.toggle("-translate-x-full");
      sidebar?.classList.toggle("translate-x-0");
      backdrop?.classList.toggle("hidden");
      return;
    }

    if (!sidebar?.contains(e.target) && !toggleButton) {
      sidebar?.classList.add("-translate-x-full");
      sidebar?.classList.remove("translate-x-0");
      backdrop?.classList.add("hidden");
    }
  });
</script>
